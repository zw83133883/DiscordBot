import DOMUtils from './DOMUtils';
import React from 'react';
import ReactDOM from 'react-dom';

class Attachment extends React.Component {
  static propTypes = {
    arrowSize: React.PropTypes.number,
    children: React.PropTypes.node,
    preferredHorizontalPosition: React.PropTypes.string,
    preferredVerticalPosition: React.PropTypes.string,
  };

  static defaultProps = {
    preferredHorizontalPosition: 'center',
    preferredVerticalPosition: 'top',
  };

  constructor(props) {
    super(props);

    const { preferredHorizontalPosition, preferredVerticalPosition } = props;

    this.state = {
      arrowLeft: 0,
      horizontalPosition: preferredHorizontalPosition,
      verticalPosition: preferredVerticalPosition,
    };

    this.handleScroll = this.handleScroll.bind(this);
  }

  addScrollListener() {
    const targetElement = ReactDOM.findDOMNode(this);
    const scrollContainerElement = DOMUtils.getScrollParentElement(targetElement);
    (scrollContainerElement || window).addEventListener('scroll', this.handleScroll);
  }

  componentDidMount() {
    this.updateTooltip();
    this.addScrollListener();
  }

  componentDidUpdate(prevProps) {
    const tooltipComponent = this.getTooltipComponent(this.props);
    const prevTooltipComponent = this.getTooltipComponent(prevProps);
    if (tooltipComponent !== prevTooltipComponent) {
      if (tooltipComponent) {
        this.updateTooltip();
        this.addScrollListener();
      } else {
        this.removeScrollListener();
      }
    }
  }

  componentWillUnmount() {
    this.removeScrollListener();
  }

  getTargetComponent(props) {
    const { children } = props;

    return React.Children.toArray(children)[0];
  }

  getTooltipComponent(props) {
    const { children } = props;

    return React.Children.toArray(children)[1];
  }

  handleScroll() {
    this.updateTooltip();
  }

  removeScrollListener() {
    const targetElement = ReactDOM.findDOMNode(this);
    const scrollContainerElement = DOMUtils.getScrollParentElement(targetElement);
    (scrollContainerElement || window).removeEventListener('scroll', this.handleScroll);
  }

  render() {
    const { arrowLeft, horizontalPosition, verticalPosition } = this.state;

    const targetComponent = this.getTargetComponent(this.props);
    const tooltipComponent = this.getTooltipComponent(this.props);

    return React.cloneElement(targetComponent, {
      children: React.Children.toArray(targetComponent.props.children).concat(tooltipComponent && React.cloneElement(tooltipComponent, {
        arrowLeft,
        horizontalPosition,
        ref: ref => this.tooltipRef = ref,
        style: {
          position: 'absolute',
          ...(verticalPosition === 'top' && {
            bottom: '100%',
          }),
          ...(verticalPosition === 'bottom' && {
            top: '100%',
          }),
          ...(horizontalPosition === 'center' && {
            left: '50%',
            transform: 'translateX(-50%)',
          }),
          ...(horizontalPosition === 'left' && {
            left: 0,
          }),
          ...(horizontalPosition === 'right' && {
            right: 0,
          }),
          ...tooltipComponent.props.style,
        },
        verticalPosition,
      })),
    });
  }

  updateTooltip() {
    const { arrowSize, preferredHorizontalPosition, preferredVerticalPosition } = this.props;

    const tooltipComponent = this.getTooltipComponent(this.props);
    if (!tooltipComponent) {
      return;
    }

    const targetElement = ReactDOM.findDOMNode(this);
    const targetRect = targetElement.getBoundingClientRect();
    const tooltipElement = ReactDOM.findDOMNode(this.tooltipRef);
    const tooltipRect = tooltipElement.getBoundingClientRect();

    const windowRect = {
      height: window.innerHeight,
      left: 0,
      top: 0,
      width: window.innerWidth,
    };

    const scrollContainerElement = DOMUtils.getScrollParentElement(targetElement);
    const scrollContainerRect = scrollContainerElement ? scrollContainerElement.getBoundingClientRect() : windowRect;

    let verticalPosition = preferredVerticalPosition;
    if (targetRect.top - tooltipRect.height < scrollContainerRect.top) {
      verticalPosition = 'bottom';
    } else if (targetRect.top + targetRect.height + tooltipRect.height > scrollContainerRect.top + scrollContainerRect.height) {
      verticalPosition = 'top';
    }

    let horizontalPosition = preferredHorizontalPosition;
    if (targetRect.left + targetRect.width / 2 - tooltipRect.width / 2 < scrollContainerRect.left) {
      horizontalPosition = 'left';
    } else if (targetRect.left + targetRect.width / 2 + tooltipRect.width / 2 > scrollContainerRect.left + scrollContainerRect.width) {
      horizontalPosition = 'right';
    }

    let arrowLeft = tooltipRect.width / 2 - arrowSize;
    const isSmall = tooltipRect.width < targetRect.width;
    if (!isSmall) {
      if (horizontalPosition === 'left') {
        arrowLeft = targetRect.width / 2 - arrowSize;
      } else if (horizontalPosition === 'right') {
        arrowLeft = tooltipRect.width - targetRect.width / 2 - arrowSize;
      }
    }
    
    if (verticalPosition !== this.state.verticalPosition || horizontalPosition !== this.state.horizontalPosition || arrowLeft !== this.state.arrowLeft) {
      this.setState({
        arrowLeft,
        horizontalPosition,
        verticalPosition,
      });
    }
  }
}

export default Attachment;
